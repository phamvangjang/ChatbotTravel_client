import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:http_parser/http_parser.dart';
import 'package:mobilev2/models/conversation_model.dart';
import 'package:mobilev2/models/message_model.dart';
import 'package:mobilev2/services/api_service.dart';

class ChatService {
  // T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
  Future<Conversation> createNewConversation(int userId, String sourceLanguage,) async {
    try {
      final response = await http.post(
        Uri.parse(ApiService.createNewConversationUrl),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'user_id': userId,
          'source_language': sourceLanguage,
          'started_at': DateTime.now().toIso8601String(),
        }),
      );

      if (response.statusCode == 201) {
        final responseData = jsonDecode(response.body);
        final conversationJson = responseData['data'];
        return Conversation.fromJson(conversationJson);
      } else {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi');
      }
    } catch (e) {
      throw Exception('L·ªói t·∫°o cu·ªôc tr√≤ chuy·ªán: $e');
    }
  }

  // L·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán c·ªßa user
  Future<List<Conversation>> getUserConversations(int userId) async {
    try {
      final response = await http.get(
        Uri.parse(ApiService.getUserConversationsUrl(userId)),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonData = jsonDecode(response.body);
        final List<dynamic> data = jsonData['data'];
        return data.map((json) => Conversation.fromJson(json)).toList();
      } else {
        throw Exception('Kh√¥ng th·ªÉ t·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán');
      }
    } catch (e) {
      throw Exception('L·ªói t·∫£i cu·ªôc tr√≤ chuy·ªán: $e');
    }
  }

  // L·∫•y tin nh·∫Øn c·ªßa m·ªôt cu·ªôc tr√≤ chuy·ªán
  Future<List<Message>> getConversationMessages(int conversationId) async {
    try {
      final response = await http.get(
        Uri.parse(ApiService.messagesByConversationUrl(conversationId)),
        headers: {'Content-Type': 'application/json'},
      );
      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonMap = jsonDecode(response.body);
        final List<dynamic> jsonData = jsonMap['data'];
        
        print("üì• Loading ${jsonData.length} messages for conversation $conversationId");
        
        return jsonData.map((json) {
          // ƒê·∫£m b·∫£o tin nh·∫Øn c≈© c√≥ places = null
          if (json['places'] == null) {
            json['places'] = null;
          }
          
          // In th√¥ng tin places cho m·ªói tin nh·∫Øn
          final messageId = json['message_id'] ?? 'N/A';
          final sender = json['sender'] ?? 'N/A';
          final messageText = json['message_text'] ?? '';
          final places = json['places'];
          
          print("üì® Message ID: $messageId | Sender: $sender");
          print("   üìù Text: ${messageText.length > 50 ? '${messageText.substring(0, 50)}...' : messageText}");
          print("   üèõÔ∏è Places: $places");
          
          if (places != null && places is List) {
            print("   üìç Places count: ${places.length}");
            for (int i = 0; i < places.length; i++) {
              print("      ${i + 1}. ${places[i]}");
            }
          } else if (places != null) {
            print("   ‚ö†Ô∏è Places is not a List: ${places.runtimeType}");
          } else {
            print("   ‚ùå No places data");
          }
          print("   " + "-" * 50);
          
          return Message.fromJson(json);
        }).toList();
      } else {
        throw Exception('Kh√¥ng th·ªÉ t·∫£i tin nh·∫Øn');
      }
    } catch (e) {
      print('L·ªói t·∫£i tin nh·∫Øn: $e');
      throw Exception('L·ªói t·∫£i tin nh·∫Øn: $e');
    }
  }

  // L∆∞u tin nh·∫Øn v√†o database
  Future<Map<String, dynamic>> sendMessageAndGetResponse({
    required int conversationId,
    required String sender,
    required String messageText,
    String translatedText = '',
    String messageType = 'text',
    String? voiceUrl,
  }) async {
    try {
      final response = await http.post(
        Uri.parse(ApiService.sendMessageUrl),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'conversation_id': conversationId,
          'sender': sender,
          'message_text': messageText,
          'translated_text': translatedText,
          'message_type': messageType,
          'voice_url': voiceUrl,
          'sent_at': DateTime.now().toIso8601String(),
        }),
      );

      if (response.statusCode == 201) {
        final Map<String, dynamic> responseData = jsonDecode(response.body);

        // Ki·ªÉm tra status
        if (responseData['status'] != 'success') {
          throw Exception(responseData['message'] ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
        }

        // X·ª≠ l√Ω travel_data v√† th√™m places v√†o bot_message
        final data = responseData['data'] as Map<String, dynamic>;
        
        // X·ª≠ l√Ω user_message - KH√îNG th√™m places v√¨ user kh√¥ng g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm
        if (data['user_message'] != null) {
          final userMessage = data['user_message'] as Map<String, dynamic>;
          userMessage['places'] = null; // User message kh√¥ng c√≥ places
        }
        
        // X·ª≠ l√Ω bot_message - Th√™m places v√¨ bot g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm
        if (data['bot_message'] != null) {
          final botMessage = data['bot_message'] as Map<String, dynamic>;
          botMessage['places'] = _extractPlacesFromTravelData(data['travel_data']);
        }

        return responseData;
      } else {
        throw Exception('L·ªói server: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('L·ªói g·ª≠i tin nh·∫Øn: $e');
    }
  }

  // Helper method ƒë·ªÉ decode Unicode escape sequences v√† fix UTF-8 encoding issues
  String _decodeUnicode(String text) {
    try {
      print("üîç Original text: $text");
      
      // B∆∞·ªõc 1: Decode Unicode escape sequences nh∆∞ \u00ed, \u00e0, etc.
      String decoded = text.replaceAllMapped(
        RegExp(r'\\u([0-9a-fA-F]{4})'),
        (match) => String.fromCharCode(int.parse(match.group(1)!, radix: 16)),
      );
      print("üîç After Unicode decode: $decoded");
      
      // B∆∞·ªõc 2: Fix UTF-8 encoding issues v·ªõi nhi·ªÅu tr∆∞·ªùng h·ª£p
      try {
        // Ki·ªÉm tra c√°c k√Ω t·ª± UTF-8 b·ªã encode sai
        if (decoded.contains('√É') || decoded.contains('√Ç') || 
            decoded.contains('√Ü') || decoded.contains('√°¬∫') || 
            decoded.contains('√°¬∫¬ª') || decoded.contains('√°¬∫¬≠')) {
          print("üîç Detected UTF-8 encoding issues, attempting multiple fixes...");
          
          // Th·ª≠ nhi·ªÅu c√°ch decode kh√°c nhau
          String result = decoded;
          
          // C√°ch 1: Latin-1 -> UTF-8
          try {
            final bytes1 = latin1.encode(decoded);
            result = utf8.decode(bytes1, allowMalformed: true);
            print("üîç After Latin-1 -> UTF-8: $result");
          } catch (e) {
            print('L·ªói Latin-1 -> UTF-8: $e');
          }
          
          // C√°ch 2: N·∫øu v·∫´n c√≤n v·∫•n ƒë·ªÅ, th·ª≠ decode l·∫°i
          if (result.contains('√É') || result.contains('√Ç') || 
              result.contains('√Ü') || result.contains('√°¬∫')) {
            try {
              final bytes2 = latin1.encode(result);
              result = utf8.decode(bytes2, allowMalformed: true);
              print("üîç After second Latin-1 -> UTF-8: $result");
            } catch (e) {
              print('L·ªói second Latin-1 -> UTF-8: $e');
            }
          }
          
          // C√°ch 3: Th·ª≠ v·ªõi ISO-8859-1
          if (result.contains('√É') || result.contains('√Ç') || 
              result.contains('√Ü') || result.contains('√°¬∫')) {
            try {
              final bytes3 = latin1.encode(result);
              result = utf8.decode(bytes3, allowMalformed: true);
              print("üîç After ISO-8859-1 -> UTF-8: $result");
            } catch (e) {
              print('L·ªói ISO-8859-1 -> UTF-8: $e');
            }
          }
          
          decoded = result;
        }
      } catch (e) {
        print('L·ªói khi fix UTF-8 encoding: $e');
      }
      
      print("üîç Final decoded text: $decoded");
      return decoded;
    } catch (e) {
      print('L·ªói khi decode Unicode: $e');
      return text;
    }
  }

  // Helper method ƒë·ªÉ tr√≠ch xu·∫•t places t·ª´ travel_data
  List<String>? _extractPlacesFromTravelData(dynamic travelData) {
    if (travelData == null) return null;
    
    try {
      final travelDataMap = travelData as Map<String, dynamic>;
      
      // Ki·ªÉm tra success = true
      if (travelDataMap['success'] != true) return null;
      
      // Ki·ªÉm tra search_results
      final searchResults = travelDataMap['search_results'];
      print("‚ÑπÔ∏è searchResults $searchResults");
      if (searchResults == null || searchResults is! List) return null;
      
      // Tr√≠ch xu·∫•t ten_dia_diem t·ª´ search_results v√† decode Unicode
      final places = <String>[];
      for (final result in searchResults) {
        if (result is Map<String, dynamic> && result['ten_dia_diem'] != null) {
          final placeName = result['ten_dia_diem'] as String;
          // Decode Unicode escape sequences
          final decodedPlaceName = _decodeUnicode(placeName);
          print("‚ÑπÔ∏è decodedPlaceName: $decodedPlaceName");
          places.add(decodedPlaceName);
        }
      }
      
      return places.isNotEmpty ? places : null;
    } catch (e) {
      print('L·ªói khi tr√≠ch xu·∫•t places t·ª´ travel_data: $e');
      return null;
    }
  }

  // G·ª≠i tin nh·∫Øn gi·ªçng n√≥i v√† nh·∫≠n ph·∫£n h·ªìi
  Future<Map<String, dynamic>> sendVoiceMessageAndGetResponse({
    required int conversationId,
    required String sender,
    required String audioFilePath,
  }) async {
    try {
      // T·∫°o request multipart/form-data
      final request = http.MultipartRequest(
        'POST',
        Uri.parse(ApiService.sendVoiceMessagesUrl(conversationId, sender)),
      );

      // Th√™m headers gi·ªëng nh∆∞ trong curl command
      request.headers['accept'] = 'application/json';

      // X√°c ƒë·ªãnh lo·∫°i file audio
      final audioFile = File(audioFilePath);
      final fileExtension = audioFilePath.split('.').last.toLowerCase();
      final mimeType = fileExtension == 'wav' ? 'audio/wav' :
      fileExtension == 'mp3' ? 'audio/mpeg' : 'audio/wav';

      // Th√™m file audio v√†o request v·ªõi mime type ch√≠nh x√°c
      request.files.add(
        http.MultipartFile(
          'audio',  // T√™n field ph·∫£i l√† 'audio' nh∆∞ trong curl command
          audioFile.readAsBytes().asStream(),
          audioFile.lengthSync(),
          filename: audioFile.path.split('/').last,
          contentType: MediaType.parse(mimeType),
        ),
      );

      print('Sending voice message to: ${request.url}');
      print('File path: $audioFilePath');
      print('File size: ${audioFile.lengthSync()} bytes');
      print('MIME type: $mimeType');

      // G·ª≠i request
      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);

      if (response.statusCode == 201) {
        final Map<String, dynamic> responseData = jsonDecode(response.body);

        // Ki·ªÉm tra status
        if (responseData['status'] != 'success') {
          throw Exception(responseData['message'] ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
        }

        return responseData;
      } else {
        throw Exception('‚ùå L·ªói server: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      print('‚ùå L·ªói g·ª≠i tin nh·∫Øn gi·ªçng n√≥i: $e');
      throw Exception('L·ªói g·ª≠i tin nh·∫Øn gi·ªçng n√≥i: $e');
    }
  }

  // K·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán
  Future<void> endConversation(int conversationId) async {
    try {
      print("üîÑ Ending conversation $conversationId");
      
      final response = await http.post(
        Uri.parse(ApiService.endConversationUrl(conversationId)),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'ended_at': DateTime.now().toIso8601String()}),
      );

      print("üì• End conversation response status: ${response.statusCode}");
      print("üì• End conversation response body: ${response.body}");

      if (response.statusCode == 200) {
        print("‚úÖ Successfully ended conversation $conversationId");
      } else if (response.statusCode == 409) {
        // Conversation ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c tr∆∞·ªõc ƒë√≥ - coi nh∆∞ th√†nh c√¥ng
        print("‚ÑπÔ∏è Conversation $conversationId is already ended (409) - treating as success");
      } else {
        print("‚ùå Failed to end conversation $conversationId: ${response.statusCode}");
        print("‚ùå Response body: ${response.body}");
        throw Exception('Kh√¥ng th·ªÉ k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán: HTTP ${response.statusCode}');
      }
    } catch (e) {
      print("‚ùå Error ending conversation $conversationId: $e");
      throw Exception('L·ªói k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán: $e');
    }
  }
}
