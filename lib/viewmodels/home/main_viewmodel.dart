import 'package:flutter/material.dart';
import 'package:mobilev2/models/conversation_model.dart';
import 'package:mobilev2/services/home/voice_service.dart';
import 'package:record/record.dart';
import '../../models/message_model.dart';
import '../../services/home/chat_service.dart';
import '../../views/home/map_view.dart';

class MainViewModel extends ChangeNotifier {
  final ChatService _chatService = ChatService();
  final VoiceService _voiceService = VoiceService();
  int? _currentUserId;

  // State variables
  List<Message> _messages = [];
  List<Conversation> _conversations = [];
  Conversation? _currentConversation;
  bool _isLoading = false;
  bool _isSending = false;
  bool _isRecording = false;
  String? _error;
  String _sourceLanguage = 'vi';
  int? _lastInitializedUserId;

  // Getters
  List<Message> get messages => _messages;
  List<Conversation> get conversations => _conversations;
  Conversation? get currentConversation => _currentConversation;
  bool get isLoading => _isLoading;
  bool get isSending => _isSending;
  bool get isRecording {
    return _isRecording;
  }
  String? get error => _error;
  int? get currentUserId => _currentUserId;

  // ‚úÖ Getter ƒë·ªÉ ki·ªÉm tra user h·ª£p l·ªá
  bool get hasValidUser => _currentUserId != null && _currentUserId! > 0;

  // L·∫•y amplitude stream ƒë·ªÉ t·∫°o waveform
  Stream<Amplitude>? getAmplitudeStream() {
    return _voiceService.getAmplitudeStream();
  }

  // ‚úÖ Method ƒë·ªÉ update userId t·ª´ UserProvider
  void updateUserId(int? newUserId) {
    print("üîÑ updateUserId called: old=$_currentUserId, new=$newUserId");

    if (_currentUserId != newUserId) {
      print("‚úÖ User ID changed from $_currentUserId to $newUserId");

      final oldUserId = _currentUserId;
      _currentUserId = newUserId;

      // Reset data khi user thay ƒë·ªïi
      if (oldUserId != null && newUserId != oldUserId) {
        print("üîÑ Resetting user data due to user change");
        _resetUserData();
        _lastInitializedUserId = null;
      }

      // ‚úÖ Th√¥ng b√°o listeners v·ªÅ thay ƒë·ªïi
      notifyListeners();

      // Kh·ªüi t·∫°o l·∫°i n·∫øu c√≥ user h·ª£p l·ªá
      if (hasValidUser) {
        print("üöÄ Initializing MainViewModel for user $newUserId");
        initialize();
      } else {
        print("‚ö†Ô∏è No valid user, skipping initialization");
      }
    } else {
      print("‚ÑπÔ∏è User ID unchanged: $_currentUserId");
    }
  }

  // Kh·ªüi t·∫°o ViewModel
  Future<void> initialize() async {
    if (!hasValidUser) {
      print("No valid user, skipping initialization");
      return;
    }

    // Ki·ªÉm tra xem c√≥ ph·∫£i user m·ªõi hay kh√¥ng
    bool isNewUser = _lastInitializedUserId != _currentUserId;

    if (isNewUser) {
      // Reset t·∫•t c·∫£ d·ªØ li·ªáu khi user m·ªõi ƒëƒÉng nh·∫≠p
      _resetUserData();
      _lastInitializedUserId = _currentUserId;
    }

    await loadUserConversations();

    // T·∫£i cu·ªôc tr√≤ chuy·ªán m·ªõi nh·∫•t c·ªßa user hi·ªán t·∫°i
    if (_conversations.isNotEmpty) {
      // L·ªçc c√°c cu·ªôc tr√≤ chuy·ªán thu·ªôc v·ªÅ user hi·ªán t·∫°i
      final userConversations = _conversations.where(
              (conv) => conv.userId == _currentUserId
      ).toList();

      if (userConversations.isNotEmpty) {
        // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t v√† l·∫•y conversation ƒë·∫ßu ti√™n
        userConversations.sort((a, b) => b.startedAt.compareTo(a.startedAt));
        final latestConversation = userConversations.first;

        print("Loading latest conversation for user $_currentUserId: ${latestConversation.conversationId}");
        await loadConversation(latestConversation.conversationId);
      } else {
        print("No conversations found for user $_currentUserId, creating new one");
        await createNewConversation();
      }
    } else {
      print("No conversations exist, creating new one for user $_currentUserId");
      await createNewConversation();
    }
  }

  void _resetUserData() {
    _messages.clear();
    _conversations.clear();
    _currentConversation = null;
    _error = null;
    _isLoading = false;
    _isSending = false;
    _isRecording = false;

    // D·ª´ng m·ªçi ho·∫°t ƒë·ªông ghi √¢m n·∫øu ƒëang th·ª±c hi·ªán
    if (_isRecording) {
      _voiceService.cancelRecording();
      _isRecording = false;
    }

    notifyListeners();
  }

  // T·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán c·ªßa user
  Future<void> loadUserConversations() async {
    if (!hasValidUser) return;
    _setLoading(true);
    clearError();

    try {
      print("Loading conversations for user: $_currentUserId");

      // ƒê·∫£m b·∫£o ch·ªâ load conversations c·ªßa user hi·ªán t·∫°i
      _conversations = await _chatService.getUserConversations(_currentUserId!);

      // Double check: L·ªçc l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ conversations c·ªßa user hi·ªán t·∫°i
      _conversations = _conversations.where(
              (conv) => conv.userId == _currentUserId
      ).toList();

      // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
      _conversations.sort((a, b) => b.startedAt.compareTo(a.startedAt));

      print("Loaded ${_conversations.length} conversations for user $_currentUserId");
      notifyListeners();
    } catch (e) {
      print("Error loading conversations for user $_currentUserId: $e");
      _setError(e.toString());
    } finally {
      _setLoading(false);
    }
  }

  // T·∫£i m·ªôt cu·ªôc tr√≤ chuy·ªán c·ª• th·ªÉ
  Future<void> loadConversation(int conversationId) async {
    if (!hasValidUser) return;
    _setLoading(true);
    clearError();

    try {
      print("Loading conversation $conversationId for user $_currentUserId");

      // T√¨m cu·ªôc tr√≤ chuy·ªán trong danh s√°ch v√† validate
      final conversation = _conversations.firstWhere(
            (conv) => conv.conversationId == conversationId && conv.userId == _currentUserId,
        orElse: () => throw Exception("Conversation $conversationId not found or doesn't belong to user $_currentUserId"),
      );

      _currentConversation = conversation;

      // T·∫£i tin nh·∫Øn c·ªßa cu·ªôc tr√≤ chuy·ªán
      _messages = await _chatService.getConversationMessages(conversationId);

      print("Loaded ${_messages.length} messages for conversation $conversationId");
      notifyListeners();
    } catch (e) {
      print("Error loading conversation $conversationId: $e");
      _setError(e.toString());

      // N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c conversation, t·∫°o m·ªõi
      await createNewConversation();
    } finally {
      _setLoading(false);
    }
  }

  // T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
  Future<void> createNewConversation() async {
    if (!hasValidUser) return;
    _setLoading(true);
    clearError();

    try {
      print("Creating new conversation for user $_currentUserId");

      final newConversation = await _chatService.createNewConversation(
        _currentUserId!,
        _sourceLanguage,
      );

      // Validate conversation ƒë∆∞·ª£c t·∫°o ƒë√∫ng user
      if (newConversation.userId != _currentUserId) {
        throw Exception("Created conversation doesn't belong to current user");
      }

      _currentConversation = newConversation;
      _conversations.insert(0, newConversation);
      _messages = [];

      print("Created new conversation ${newConversation.conversationId} for user $_currentUserId");
      notifyListeners();
    } catch (e) {
      print("Error creating new conversation for user $_currentUserId: $e");
      _setError(e.toString());
    } finally {
      _setLoading(false);
    }
  }

  // G·ª≠i tin nh·∫Øn d·∫°ng text
  Future<void> sendMessage(String messageText) async {
    if (!hasValidUser || _currentConversation == null || messageText.trim().isEmpty) return;

    _setSending(true);
    clearError();

    try {
      // L∆∞u tin nh·∫Øn c·ªßa user
      final response = await _chatService.sendMessageAndGetResponse(
        conversationId: _currentConversation!.conversationId,
        sender: 'user',
        messageText: messageText,
      );

      // Parse response data
      final responseData = response['data'] as Map<String, dynamic>;

      // L·∫•y user message t·ª´ response
      final userMessageData = responseData['user_message'] as Map<String, dynamic>;
      final userMessage = Message.fromJson(userMessageData);

      // L·∫•y bot message t·ª´ response
      final botMessageData = responseData['bot_message'] as Map<String, dynamic>;
      final botMessage = Message.fromJson(botMessageData);

      // Th√™m c·∫£ 2 tin nh·∫Øn v√†o danh s√°ch
      _messages.add(userMessage);
      _messages.add(botMessage);
      notifyListeners();

    } catch (e) {
      _setError(e.toString());
    } finally {
      _setSending(false);
    }
  }

  // B·∫Øt ƒë·∫ßu ghi √¢m
  Future<void> startVoiceRecording() async {
    clearError();

    try {
      final success = await _voiceService.startRecording();
      if (success) {
        _isRecording = true;
        notifyListeners();
      }
    } catch (e) {
      _setError(e.toString());
    }
  }

  // D·ª´ng ghi √¢m v√† g·ª≠i tin nh·∫Øn gi·ªçng n√≥i
  Future<void> stopVoiceRecording() async {
    if (!_isRecording) return;

    _setSending(true);
    _isRecording = false;
    notifyListeners();

    try {
      final filePath = await _voiceService.stopRecording();
      if (filePath == null || filePath.isEmpty) {
        throw Exception('Kh√¥ng th·ªÉ l∆∞u file ghi √¢m');
      }

      // Upload v√† chuy·ªÉn ƒë·ªïi gi·ªçng n√≥i th√†nh text
      final voiceResult = await _voiceService.uploadVoiceAndConvertToText(filePath);
      final transcribedText = voiceResult['text'] as String;
      final voiceUrl = voiceResult['voice_url'] as String;

      if (transcribedText.isEmpty) {
        throw Exception('Kh√¥ng th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i. Vui l√≤ng th·ª≠ l·∫°i.');
      }

      // L∆∞u tin nh·∫Øn gi·ªçng n√≥i c·ªßa user
      final response = await _chatService.sendMessageAndGetResponse(
        conversationId: _currentConversation!.conversationId,
        sender: 'user',
        messageText: transcribedText,
        messageType: 'voice',
        voiceUrl: voiceUrl,
      );

      // Parse response data
      final responseData = response['data'] as Map<String, dynamic>;

      // L·∫•y user message t·ª´ response
      final userMessageData = responseData['user_message'] as Map<String, dynamic>;
      final userMessage = Message.fromJson(userMessageData);

      // L·∫•y bot message t·ª´ response
      final botMessageData = responseData['bot_message'] as Map<String, dynamic>;
      final botMessage = Message.fromJson(botMessageData);

      // Th√™m c·∫£ 2 tin nh·∫Øn v√†o danh s√°ch
      _messages.add(userMessage);
      _messages.add(botMessage);
      notifyListeners();

      // X√≥a file t·∫°m
      await _voiceService.deleteTemporaryFile(filePath);

    } catch (e) {
      _setError(e.toString());
      _isRecording = false;
      notifyListeners();
    } finally {
      _setSending(false);
    }
  }

  // H·ªßy ghi √¢m
  Future<void> cancelVoiceRecording() async {
    if (!_isRecording) return;

    try {
      await _voiceService.cancelRecording();
      _isRecording = false;
      notifyListeners();
    } catch (e) {
      _setError(e.toString());
    }
  }

  // K·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i v√† t·∫°o m·ªõi
  Future<void> startNewConversation() async {
    if (_currentConversation != null) {
      try {
        await _chatService.endConversation(
          _currentConversation!.conversationId,
        );
      } catch (e) {
        // Log error nh∆∞ng v·∫´n ti·∫øp t·ª•c t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
        debugPrint('L·ªói k·∫øt th√∫c cu·ªôc tr√≤ chuy·ªán: $e');
      }
    }

    await createNewConversation();
  }

  // M·ªü b·∫£n ƒë·ªì v·ªõi text tin nh·∫Øn
  void openMapWithMessageText(BuildContext context, String messageText) {
    // Implement logic m·ªü b·∫£n ƒë·ªì
    // V√≠ d·ª•: Navigator.push(context, MaterialPageRoute(...))
    debugPrint('M·ªü b·∫£n ƒë·ªì v·ªõi: $messageText');
  }

  // Refresh to√†n b·ªô d·ªØ li·ªáu
  Future<void> refresh() async {
    if (!hasValidUser) return;
    await loadUserConversations();
    if (_currentConversation != null) {
      await loadConversation(_currentConversation!.conversationId);
    }
  }



  // Helper methods
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setSending(bool sending) {
    _isSending = sending;
    notifyListeners();
  }

  void _setError(String error) {
    _error = error;
    notifyListeners();
  }

  void clearError() {
    _error = null;
  }

  // Setter cho user ID (khi user ƒëƒÉng nh·∫≠p)
  void setCurrentUser(int userId, String language) {
    bool isUserChanged = _currentUserId != userId;

    _currentUserId = userId;
    _sourceLanguage = language;

    if (isUserChanged) {
      print("User changed from $_currentUserId to $userId");
      // Reset d·ªØ li·ªáu khi user thay ƒë·ªïi
      _resetUserData();
      _lastInitializedUserId = null; // Reset ƒë·ªÉ force initialize l·∫°i
    }

    initialize(); // T·∫£i l·∫°i d·ªØ li·ªáu cho user m·ªõi// T·∫£i l·∫°i d·ªØ li·ªáu cho user m·ªõi
  }

  // Ph∆∞∆°ng th·ª©c logout ƒë·ªÉ reset to√†n b·ªô d·ªØ li·ªáu
  void logout() {
    _resetUserData();
    _lastInitializedUserId = null;
    _currentUserId = 0; // ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
  }

  void sendAudioMessage() async {
    // Ghi √¢m ho·∫∑c ch·ªçn file √¢m thanh r·ªìi g·ª≠i l√™n server
    print("sendAudioMessage");
  }

  // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a th√¥ng tin ƒë·ªãa ƒëi·ªÉm kh√¥ng
  bool containsLocationInfo(String message) {
    final locationKeywords = [
      'ƒë·ªãa ƒëi·ªÉm',
      'location',
      'ƒëi ƒë·∫øn',
      'visit',
      'tham quan',
      'du l·ªãch',
      'l·ªãch tr√¨nh',
      'itinerary',
      'b·∫£n ƒë·ªì',
      'map',
      't·ªça ƒë·ªô',
      'coordinates',
      'b·∫øn th√†nh',
      'nh√† th·ªù ƒë·ª©c b√†',
      'dinh ƒë·ªôc l·∫≠p',
      'landmark',
      'bitexco',
    ];

    final lowerMessage = message.toLowerCase();
    return locationKeywords.any((keyword) => lowerMessage.contains(keyword));
  }

  // Hi·ªÉn th·ªã popup v·ªõi c√°c t√πy ch·ªçn cho tin nh·∫Øn du l·ªãch
  void showTravelOptionsPopup(BuildContext context, Message message) {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Handle bar
            Container(
              width: 40,
              height: 4,
              margin: const EdgeInsets.symmetric(vertical: 12),
              decoration: BoxDecoration(
                color: Colors.grey.shade300,
                borderRadius: BorderRadius.circular(2),
              ),
            ),

            // Header
            Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  Icon(Icons.travel_explore, color: Colors.blue.shade600),
                  const SizedBox(width: 12),
                  const Text(
                    'T√πy ch·ªçn du l·ªãch',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),

            // Options
            ListTile(
              leading: Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.blue.shade50,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(Icons.map, color: Colors.blue.shade600),
              ),
              title: const Text('Xem tr√™n b·∫£n ƒë·ªì'),
              subtitle: const Text('Hi·ªÉn th·ªã ƒë·ªãa ƒëi·ªÉm v√† l·ªãch tr√¨nh'),
              trailing: const Icon(Icons.arrow_forward_ios, size: 16),
              onTap: () {
                Navigator.pop(context);
                navigateToMapView(context, message);
              },
            ),

            ListTile(
              leading: Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.green.shade50,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(Icons.route, color: Colors.green.shade600),
              ),
              title: const Text('L·∫≠p l·ªãch tr√¨nh'),
              subtitle: const Text('T·∫°o k·∫ø ho·∫°ch chi ti·∫øt'),
              trailing: const Icon(Icons.arrow_forward_ios, size: 16),
              onTap: () {
                Navigator.pop(context);
                createItinerary(context, message);
              },
            ),

            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  // Chuy·ªÉn ƒë·∫øn MapView
  void navigateToMapView(BuildContext context, Message message) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => MapView(
          messageContent: message.messageText,
          conversationId: message.conversationId,
        ),
      ),
    );
  }

  // T·∫°o l·ªãch tr√¨nh
  void createItinerary(BuildContext context, Message message) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('L·∫≠p l·ªãch tr√¨nh'),
        content: const Text(
          'T√≠nh nƒÉng l·∫≠p l·ªãch tr√¨nh ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }

  // X·ª≠ l√Ω khi nh·∫•n n√∫t t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
  void handleNewConversationTap(BuildContext context) {
    // Ki·ªÉm tra xem cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i c√≥ tin nh·∫Øn hay kh√¥ng
    final hasMessages = _messages.isNotEmpty;

    if (!hasMessages) {
      // N·∫øu ch∆∞a c√≥ tin nh·∫Øn, hi·ªÉn th·ªã th√¥ng b√°o
      showEmptyConversationWarning(context);
    } else {
      // N·∫øu ƒë√£ c√≥ tin nh·∫Øn, cho ph√©p t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
      createNewConversation();
    }
  }

  // Hi·ªÉn th·ªã c·∫£nh b√°o khi cu·ªôc tr√≤ chuy·ªán tr·ªëng
  void showEmptyConversationWarning(BuildContext context) {
    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        icon: Icon(
          Icons.info_outline,
          color: Colors.orange.shade600,
          size: 48,
        ),
        title: const Text(
          'Cu·ªôc tr√≤ chuy·ªán tr·ªëng',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'Cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i ch∆∞a c√≥ tin nh·∫Øn n√†o.',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 8),
            Text(
              'H√£y g·ª≠i √≠t nh·∫•t m·ªôt tin nh·∫Øn tr∆∞·ªõc khi t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi.',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 14, color: Colors.grey),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(dialogContext); // ƒê√≥ng dialog
            },
            child: const Text('ƒê√£ hi·ªÉu'),
          ),
        ],
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
      ),
    );
  }

  // Cu·ªôn xu·ªëng cu·ªëi danh s√°ch tin nh·∫Øn
  void scrollToBottom(ScrollController scrollController) {
    if (scrollController.hasClients) {
      scrollController.animateTo(
        scrollController.position.maxScrollExtent,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }

  @override
  void dispose() {
    _voiceService.dispose();
    super.dispose();
  }
}
