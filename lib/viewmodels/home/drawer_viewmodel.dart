import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../../models/conversation_model.dart';
import '../../providers/user_provider.dart';
import '../../services/home/chat_service.dart';
import 'main_viewmodel.dart';

class DrawerViewModel extends ChangeNotifier {
  final ChatService _chatService = ChatService();
  final int userId;

  List<Conversation> _conversations = [];
  bool _isLoading = false;
  String? _error;
  String _searchQuery = '';

  DrawerViewModel(this.userId) {
    loadConversations();
  }

  // Getters
  List<Conversation> get conversations => _conversations;
  bool get isLoading => _isLoading;
  String? get error => _error;
  String get searchQuery => _searchQuery;

  // Setter cho search query
  void setSearchQuery(String query) {
    _searchQuery = query;
    notifyListeners();
  }

  // T·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán
  Future<void> loadConversations() async {
    _setLoading(true);
    _clearError();

    try {
      _conversations = await _chatService.getUserConversations(userId);
      // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
      _conversations.sort((a, b) => b.startedAt.compareTo(a.startedAt));
      notifyListeners();
    } catch (e) {
      _setError(e.toString());
    } finally {
      _setLoading(false);
    }
  }

  // Refresh danh s√°ch
  Future<void> refresh() async {
    await loadConversations();
  }

  // Helper methods
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _error = error;
    notifyListeners();
  }

  void _clearError() {
    _error = null;
  }

  Future<void> onConversationTap(
      BuildContext context,
      Conversation conversation,
      MainViewModel mainViewModel,
      ) async {
    // ƒê√≥ng drawer tr∆∞·ªõc
    Navigator.of(context).pop();

    print("====================onConversationTap====================");
    print("Conversation ID: ${conversation.conversationId}");
    print("Conversation User ID: ${conversation.userId}");
    print("DrawerViewModel User ID: $userId");
    print("MainViewModel User ID: ${mainViewModel.currentUserId}");

    // ‚úÖ Ki·ªÉm tra MainViewModel c√≥ user h·ª£p l·ªá kh√¥ng
    if (!mainViewModel.hasValidUser) {
      print("‚ùå MainViewModel doesn't have valid user");
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng hi·ªán t·∫°i'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // ‚úÖ Ki·ªÉm tra userId c√≥ kh·ªõp kh√¥ng
    if (mainViewModel.currentUserId != userId) {
      print("‚ùå User ID mismatch: MainViewModel=${mainViewModel.currentUserId}, DrawerViewModel=$userId");

      // Th·ª≠ c·∫≠p nh·∫≠t l·∫°i MainViewModel
      final userProvider = Provider.of<UserProvider>(context, listen: false);
      if (userProvider.user != null) {
        print("üîÑ Trying to update MainViewModel userId");
        mainViewModel.updateUserId(userProvider.user!.id);

        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ MainViewModel c·∫≠p nh·∫≠t
        await Future.delayed(const Duration(milliseconds: 100));

        if (!mainViewModel.hasValidUser) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('L·ªói: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng'),
              backgroundColor: Colors.red,
            ),
          );
          return;
        }
      }
    }

    // ‚úÖ Ki·ªÉm tra xem conversation c√≥ thu·ªôc v·ªÅ user hi·ªán t·∫°i kh√¥ng
    if (conversation.userId != mainViewModel.currentUserId) {
      print("‚ùå Conversation doesn't belong to current user");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Cu·ªôc tr√≤ chuy·ªán kh√¥ng thu·ªôc v·ªÅ ng∆∞·ªùi d√πng hi·ªán t·∫°i (${conversation.userId} != ${mainViewModel.currentUserId})'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // Hi·ªÉn th·ªã loading indicator
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Row(
          children: [
            SizedBox(
              width: 16,
              height: 16,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                color: Colors.white,
              ),
            ),
            SizedBox(width: 12),
            Text('ƒêang t·∫£i cu·ªôc tr√≤ chuy·ªán...'),
          ],
        ),
        duration: Duration(seconds: 1),
      ),
    );

    // ‚úÖ Ki·ªÉm tra xem conversation c√≥ thu·ªôc v·ªÅ user hi·ªán t·∫°i kh√¥ng
    if (conversation.userId != userId) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Cu·ªôc tr√≤ chuy·ªán kh√¥ng thu·ªôc v·ªÅ ng∆∞·ªùi d√πng hi·ªán t·∫°i'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // T·∫£i cu·ªôc tr√≤ chuy·ªán
    try {
      // ‚úÖ Debug log
      print("Calling loadConversation with ID: ${conversation.conversationId}");
      print("Current user ID in MainViewModel: ${mainViewModel.currentUserId}");

      await mainViewModel.loadConversation(conversation.conversationId);

      // ‚úÖ Ki·ªÉm tra k·∫øt qu·∫£
      print("Messages loaded: ${mainViewModel.messages.length}");

      // ‚úÖ Th√¥ng b√°o th√†nh c√¥ng n·∫øu t·∫£i ƒë∆∞·ª£c tin nh·∫Øn
      if (mainViewModel.messages.isNotEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒê√£ t·∫£i ${mainViewModel.messages.length} tin nh·∫Øn'),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 1),
          ),
        );
      }
    } catch (e) {
      print("Error loading conversation: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói t·∫£i cu·ªôc tr√≤ chuy·ªán: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> handleNewConversationTap(
      BuildContext context,
      MainViewModel mainViewModel,
      ) async {
    // Ki·ªÉm tra xem cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i c√≥ tin nh·∫Øn hay kh√¥ng
    final currentMessages = mainViewModel.messages;
    final hasMessages = currentMessages.isNotEmpty;

    if (!hasMessages) {
      // N·∫øu ch∆∞a c√≥ tin nh·∫Øn, hi·ªÉn th·ªã th√¥ng b√°o
      showEmptyConversationWarning(context);
    } else {
      // N·∫øu ƒë√£ c√≥ tin nh·∫Øn, cho ph√©p t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
      showNewConversationDialog(context, mainViewModel);
    }
  }

  void showEmptyConversationWarning(BuildContext context) {
    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        icon: Icon(
          Icons.info_outline,
          color: Colors.orange.shade600,
          size: 48,
        ),
        title: const Text(
          'Cu·ªôc tr√≤ chuy·ªán tr·ªëng',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'Cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i ch∆∞a c√≥ tin nh·∫Øn n√†o.',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 8),
            Text(
              'H√£y g·ª≠i √≠t nh·∫•t m·ªôt tin nh·∫Øn tr∆∞·ªõc khi t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi.',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 14, color: Colors.grey),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(dialogContext); // ƒê√≥ng dialog
              Navigator.pop(context); // ƒê√≥ng drawer
            },
            child: const Text('ƒê√£ hi·ªÉu'),
          ),
        ],
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
      ),
    );
  }

  void showNewConversationDialog(BuildContext context, MainViewModel mainViewModel) {
    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        icon: Icon(
          Icons.chat_bubble_outline,
          color: Colors.blue.shade600,
          size: 48,
        ),
        title: const Text(
          'Cu·ªôc tr√≤ chuy·ªán m·ªõi',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi kh√¥ng?',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 8),
            Text(
              'Cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i s·∫Ω ƒë∆∞·ª£c l∆∞u l·∫°i.',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 14, color: Colors.grey),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(dialogContext),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(dialogContext); // ƒê√≥ng dialog
              Navigator.pop(context); // ƒê√≥ng drawer

              // Show loading indicator
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Row(
                    children: [
                      SizedBox(
                        width: 16,
                        height: 16,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: Colors.white,
                        ),
                      ),
                      SizedBox(width: 12),
                      Text('ƒêang t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi...'),
                    ],
                  ),
                  duration: Duration(seconds: 2),
                ),
              );

              try {
                await mainViewModel.startNewConversation();

                // Refresh drawer conversations
                await loadConversations();

                // Show success message
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('ƒê√£ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi th√†nh c√¥ng!'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 2),
                  ),
                );
              } catch (e) {
                // Show error message
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('L·ªói t·∫°o cu·ªôc tr√≤ chuy·ªán: $e'),
                    backgroundColor: Colors.red,
                    duration: const Duration(seconds: 3),
                  ),
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue.shade600,
              foregroundColor: Colors.white,
            ),
            child: const Text('T·∫°o m·ªõi'),
          ),
        ],
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
      ),
    );
  }

  String formatDateTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inDays > 0) {
      if (difference.inDays == 1) {
        return 'H√¥m qua';
      } else if (difference.inDays < 7) {
        return '${difference.inDays} ng√†y tr∆∞·ªõc';
      } else {
        return '${dateTime.day}/${dateTime.month}/${dateTime.year}';
      }
    } else if (difference.inHours > 0) {
      return '${difference.inHours} gi·ªù tr∆∞·ªõc';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes} ph√∫t tr∆∞·ªõc';
    } else {
      return 'V·ª´a xong';
    }
  }

  // ‚úÖ Chuy·ªÉn t·ª´ View: L·∫•y ti√™u ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán
  String getConversationTitle(Conversation conversation) {
    final conversationTitle = conversation.title;
    return conversationTitle.toString();
  }

  // ‚úÖ Chuy·ªÉn t·ª´ View: L·∫•y ph·ª• ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán
  String getConversationSubtitle(Conversation conversation) {
    final formattedTime = formatDateTime(conversation.startedAt);
    final language =
    conversation.sourceLanguage == 'vi' ? 'Ti·∫øng Vi·ªát' : 'English';
    return '$language ‚Ä¢ $formattedTime';
  }

  // ‚úÖ Chuy·ªÉn t·ª´ View: L·ªçc danh s√°ch cu·ªôc tr√≤ chuy·ªán theo t·ª´ kh√≥a
  List<Conversation> getFilteredConversations() {
    if (_searchQuery.isEmpty) {
      return _conversations;
    }

    return _conversations.where((conversation) {
      final title = getConversationTitle(conversation).toLowerCase();
      final subtitle = getConversationSubtitle(conversation).toLowerCase();
      final query = _searchQuery.toLowerCase();

      return title.contains(query) || subtitle.contains(query);
    }).toList();
  }
}
